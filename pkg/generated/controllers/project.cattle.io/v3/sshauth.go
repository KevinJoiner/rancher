/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/project.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type SSHAuthHandler func(string, *v3.SSHAuth) (*v3.SSHAuth, error)

type SSHAuthController interface {
	generic.ControllerMeta
	SSHAuthClient

	OnChange(ctx context.Context, name string, sync SSHAuthHandler)
	OnRemove(ctx context.Context, name string, sync SSHAuthHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() SSHAuthCache
}

type SSHAuthClient interface {
	Create(*v3.SSHAuth) (*v3.SSHAuth, error)
	Update(*v3.SSHAuth) (*v3.SSHAuth, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.SSHAuth, error)
	List(namespace string, opts metav1.ListOptions) (*v3.SSHAuthList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.SSHAuth, err error)
}

type SSHAuthCache interface {
	Get(namespace, name string) (*v3.SSHAuth, error)
	List(namespace string, selector labels.Selector) ([]*v3.SSHAuth, error)

	AddIndexer(indexName string, indexer SSHAuthIndexer)
	GetByIndex(indexName, key string) ([]*v3.SSHAuth, error)
}

type SSHAuthIndexer func(obj *v3.SSHAuth) ([]string, error)

type SSHAuthGenericController struct {
	generic.ControllerInterface[*v3.SSHAuth, *v3.SSHAuthList]
}

func (c *SSHAuthGenericController) OnChange(ctx context.Context, name string, sync SSHAuthHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.SSHAuth](sync))
}

func (c *SSHAuthGenericController) OnRemove(ctx context.Context, name string, sync SSHAuthHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.SSHAuth](sync))
}

func (c *SSHAuthGenericController) Cache() SSHAuthCache {
	return &SSHAuthGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type SSHAuthGenericCache struct {
	generic.CacheInterface[*v3.SSHAuth]
}

func (c SSHAuthGenericCache) AddIndexer(indexName string, indexer SSHAuthIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.SSHAuth](indexer))
}
