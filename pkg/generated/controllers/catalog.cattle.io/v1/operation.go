/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/rancher/pkg/apis/catalog.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type OperationHandler func(string, *v1.Operation) (*v1.Operation, error)

type OperationController interface {
	generic.ControllerMeta
	OperationClient

	OnChange(ctx context.Context, name string, sync OperationHandler)
	OnRemove(ctx context.Context, name string, sync OperationHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() OperationCache
}

type OperationClient interface {
	Create(*v1.Operation) (*v1.Operation, error)
	Update(*v1.Operation) (*v1.Operation, error)
	UpdateStatus(*v1.Operation) (*v1.Operation, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.Operation, error)
	List(namespace string, opts metav1.ListOptions) (*v1.OperationList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.Operation, err error)
}

type OperationCache interface {
	Get(namespace, name string) (*v1.Operation, error)
	List(namespace string, selector labels.Selector) ([]*v1.Operation, error)

	AddIndexer(indexName string, indexer OperationIndexer)
	GetByIndex(indexName, key string) ([]*v1.Operation, error)
}

type OperationIndexer func(obj *v1.Operation) ([]string, error)

type OperationGenericController struct {
	generic.ControllerInterface[*v1.Operation, *v1.OperationList]
}

func (c *OperationGenericController) OnChange(ctx context.Context, name string, sync OperationHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v1.Operation](sync))
}

func (c *OperationGenericController) OnRemove(ctx context.Context, name string, sync OperationHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v1.Operation](sync))
}

func (c *OperationGenericController) Cache() OperationCache {
	return &OperationGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type OperationGenericCache struct {
	generic.CacheInterface[*v1.Operation]
}

func (c OperationGenericCache) AddIndexer(indexName string, indexer OperationIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v1.Operation](indexer))
}

type OperationStatusHandler func(obj *v1.Operation, status v1.OperationStatus) (v1.OperationStatus, error)

type OperationGeneratingHandler func(obj *v1.Operation, status v1.OperationStatus) ([]runtime.Object, v1.OperationStatus, error)

func FromOperationHandlerToHandler(sync OperationHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v1.Operation](sync))
}

func RegisterOperationStatusHandler(ctx context.Context, controller OperationController, condition condition.Cond, name string, handler OperationStatusHandler) {
	statusHandler := &operationStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromOperationHandlerToHandler(statusHandler.sync))
}

func RegisterOperationGeneratingHandler(ctx context.Context, controller OperationController, apply apply.Apply,
	condition condition.Cond, name string, handler OperationGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &operationGeneratingHandler{
		OperationGeneratingHandler: handler,
		apply:                      apply,
		name:                       name,
		gvk:                        controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterOperationStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type operationStatusHandler struct {
	client    OperationClient
	condition condition.Cond
	handler   OperationStatusHandler
}

func (a *operationStatusHandler) sync(key string, obj *v1.Operation) (*v1.Operation, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type operationGeneratingHandler struct {
	OperationGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *operationGeneratingHandler) Remove(key string, obj *v1.Operation) (*v1.Operation, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.Operation{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *operationGeneratingHandler) Handle(obj *v1.Operation, status v1.OperationStatus) (v1.OperationStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.OperationGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
