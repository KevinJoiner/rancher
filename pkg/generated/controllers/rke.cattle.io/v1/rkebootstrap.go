/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/rancher/pkg/apis/rke.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type RKEBootstrapHandler func(string, *v1.RKEBootstrap) (*v1.RKEBootstrap, error)

type RKEBootstrapController interface {
	generic.ControllerMeta
	RKEBootstrapClient

	OnChange(ctx context.Context, name string, sync RKEBootstrapHandler)
	OnRemove(ctx context.Context, name string, sync RKEBootstrapHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() RKEBootstrapCache
}

type RKEBootstrapClient interface {
	Create(*v1.RKEBootstrap) (*v1.RKEBootstrap, error)
	Update(*v1.RKEBootstrap) (*v1.RKEBootstrap, error)
	UpdateStatus(*v1.RKEBootstrap) (*v1.RKEBootstrap, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.RKEBootstrap, error)
	List(namespace string, opts metav1.ListOptions) (*v1.RKEBootstrapList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.RKEBootstrap, err error)
}

type RKEBootstrapCache interface {
	Get(namespace, name string) (*v1.RKEBootstrap, error)
	List(namespace string, selector labels.Selector) ([]*v1.RKEBootstrap, error)

	AddIndexer(indexName string, indexer RKEBootstrapIndexer)
	GetByIndex(indexName, key string) ([]*v1.RKEBootstrap, error)
}

type RKEBootstrapIndexer func(obj *v1.RKEBootstrap) ([]string, error)

type RKEBootstrapGenericController struct {
	generic.ControllerInterface[*v1.RKEBootstrap, *v1.RKEBootstrapList]
}

func (c *RKEBootstrapGenericController) OnChange(ctx context.Context, name string, sync RKEBootstrapHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v1.RKEBootstrap](sync))
}

func (c *RKEBootstrapGenericController) OnRemove(ctx context.Context, name string, sync RKEBootstrapHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v1.RKEBootstrap](sync))
}

func (c *RKEBootstrapGenericController) Cache() RKEBootstrapCache {
	return &RKEBootstrapGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type RKEBootstrapGenericCache struct {
	generic.CacheInterface[*v1.RKEBootstrap]
}

func (c RKEBootstrapGenericCache) AddIndexer(indexName string, indexer RKEBootstrapIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v1.RKEBootstrap](indexer))
}

type RKEBootstrapStatusHandler func(obj *v1.RKEBootstrap, status v1.RKEBootstrapStatus) (v1.RKEBootstrapStatus, error)

type RKEBootstrapGeneratingHandler func(obj *v1.RKEBootstrap, status v1.RKEBootstrapStatus) ([]runtime.Object, v1.RKEBootstrapStatus, error)

func FromRKEBootstrapHandlerToHandler(sync RKEBootstrapHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v1.RKEBootstrap](sync))
}

func RegisterRKEBootstrapStatusHandler(ctx context.Context, controller RKEBootstrapController, condition condition.Cond, name string, handler RKEBootstrapStatusHandler) {
	statusHandler := &rKEBootstrapStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromRKEBootstrapHandlerToHandler(statusHandler.sync))
}

func RegisterRKEBootstrapGeneratingHandler(ctx context.Context, controller RKEBootstrapController, apply apply.Apply,
	condition condition.Cond, name string, handler RKEBootstrapGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &rKEBootstrapGeneratingHandler{
		RKEBootstrapGeneratingHandler: handler,
		apply:                         apply,
		name:                          name,
		gvk:                           controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterRKEBootstrapStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type rKEBootstrapStatusHandler struct {
	client    RKEBootstrapClient
	condition condition.Cond
	handler   RKEBootstrapStatusHandler
}

func (a *rKEBootstrapStatusHandler) sync(key string, obj *v1.RKEBootstrap) (*v1.RKEBootstrap, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type rKEBootstrapGeneratingHandler struct {
	RKEBootstrapGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *rKEBootstrapGeneratingHandler) Remove(key string, obj *v1.RKEBootstrap) (*v1.RKEBootstrap, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.RKEBootstrap{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *rKEBootstrapGeneratingHandler) Handle(obj *v1.RKEBootstrap, status v1.RKEBootstrapStatus) (v1.RKEBootstrapStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.RKEBootstrapGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
