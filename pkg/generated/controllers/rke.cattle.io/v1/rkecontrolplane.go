/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/rancher/pkg/apis/rke.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type RKEControlPlaneHandler func(string, *v1.RKEControlPlane) (*v1.RKEControlPlane, error)

type RKEControlPlaneController interface {
	generic.ControllerMeta
	RKEControlPlaneClient

	OnChange(ctx context.Context, name string, sync RKEControlPlaneHandler)
	OnRemove(ctx context.Context, name string, sync RKEControlPlaneHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() RKEControlPlaneCache
}

type RKEControlPlaneClient interface {
	Create(*v1.RKEControlPlane) (*v1.RKEControlPlane, error)
	Update(*v1.RKEControlPlane) (*v1.RKEControlPlane, error)
	UpdateStatus(*v1.RKEControlPlane) (*v1.RKEControlPlane, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.RKEControlPlane, error)
	List(namespace string, opts metav1.ListOptions) (*v1.RKEControlPlaneList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.RKEControlPlane, err error)
}

type RKEControlPlaneCache interface {
	Get(namespace, name string) (*v1.RKEControlPlane, error)
	List(namespace string, selector labels.Selector) ([]*v1.RKEControlPlane, error)

	AddIndexer(indexName string, indexer RKEControlPlaneIndexer)
	GetByIndex(indexName, key string) ([]*v1.RKEControlPlane, error)
}

type RKEControlPlaneIndexer func(obj *v1.RKEControlPlane) ([]string, error)

type RKEControlPlaneGenericController struct {
	generic.ControllerInterface[*v1.RKEControlPlane, *v1.RKEControlPlaneList]
}

func (c *RKEControlPlaneGenericController) OnChange(ctx context.Context, name string, sync RKEControlPlaneHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v1.RKEControlPlane](sync))
}

func (c *RKEControlPlaneGenericController) OnRemove(ctx context.Context, name string, sync RKEControlPlaneHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v1.RKEControlPlane](sync))
}

func (c *RKEControlPlaneGenericController) Cache() RKEControlPlaneCache {
	return &RKEControlPlaneGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type RKEControlPlaneGenericCache struct {
	generic.CacheInterface[*v1.RKEControlPlane]
}

func (c RKEControlPlaneGenericCache) AddIndexer(indexName string, indexer RKEControlPlaneIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v1.RKEControlPlane](indexer))
}

type RKEControlPlaneStatusHandler func(obj *v1.RKEControlPlane, status v1.RKEControlPlaneStatus) (v1.RKEControlPlaneStatus, error)

type RKEControlPlaneGeneratingHandler func(obj *v1.RKEControlPlane, status v1.RKEControlPlaneStatus) ([]runtime.Object, v1.RKEControlPlaneStatus, error)

func FromRKEControlPlaneHandlerToHandler(sync RKEControlPlaneHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v1.RKEControlPlane](sync))
}

func RegisterRKEControlPlaneStatusHandler(ctx context.Context, controller RKEControlPlaneController, condition condition.Cond, name string, handler RKEControlPlaneStatusHandler) {
	statusHandler := &rKEControlPlaneStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromRKEControlPlaneHandlerToHandler(statusHandler.sync))
}

func RegisterRKEControlPlaneGeneratingHandler(ctx context.Context, controller RKEControlPlaneController, apply apply.Apply,
	condition condition.Cond, name string, handler RKEControlPlaneGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &rKEControlPlaneGeneratingHandler{
		RKEControlPlaneGeneratingHandler: handler,
		apply:                            apply,
		name:                             name,
		gvk:                              controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterRKEControlPlaneStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type rKEControlPlaneStatusHandler struct {
	client    RKEControlPlaneClient
	condition condition.Cond
	handler   RKEControlPlaneStatusHandler
}

func (a *rKEControlPlaneStatusHandler) sync(key string, obj *v1.RKEControlPlane) (*v1.RKEControlPlane, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type rKEControlPlaneGeneratingHandler struct {
	RKEControlPlaneGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *rKEControlPlaneGeneratingHandler) Remove(key string, obj *v1.RKEControlPlane) (*v1.RKEControlPlane, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.RKEControlPlane{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *rKEControlPlaneGeneratingHandler) Handle(obj *v1.RKEControlPlane, status v1.RKEControlPlaneStatus) (v1.RKEControlPlaneStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.RKEControlPlaneGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
