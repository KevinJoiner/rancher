/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type NotifierHandler func(string, *v3.Notifier) (*v3.Notifier, error)

type NotifierController interface {
	generic.ControllerMeta
	NotifierClient

	OnChange(ctx context.Context, name string, sync NotifierHandler)
	OnRemove(ctx context.Context, name string, sync NotifierHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() NotifierCache
}

type NotifierClient interface {
	Create(*v3.Notifier) (*v3.Notifier, error)
	Update(*v3.Notifier) (*v3.Notifier, error)
	UpdateStatus(*v3.Notifier) (*v3.Notifier, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.Notifier, error)
	List(namespace string, opts metav1.ListOptions) (*v3.NotifierList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.Notifier, err error)
}

type NotifierCache interface {
	Get(namespace, name string) (*v3.Notifier, error)
	List(namespace string, selector labels.Selector) ([]*v3.Notifier, error)

	AddIndexer(indexName string, indexer NotifierIndexer)
	GetByIndex(indexName, key string) ([]*v3.Notifier, error)
}

type NotifierIndexer func(obj *v3.Notifier) ([]string, error)

type NotifierGenericController struct {
	generic.ControllerInterface[*v3.Notifier, *v3.NotifierList]
}

func (c *NotifierGenericController) OnChange(ctx context.Context, name string, sync NotifierHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.Notifier](sync))
}

func (c *NotifierGenericController) OnRemove(ctx context.Context, name string, sync NotifierHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.Notifier](sync))
}

func (c *NotifierGenericController) Cache() NotifierCache {
	return &NotifierGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type NotifierGenericCache struct {
	generic.CacheInterface[*v3.Notifier]
}

func (c NotifierGenericCache) AddIndexer(indexName string, indexer NotifierIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.Notifier](indexer))
}

type NotifierStatusHandler func(obj *v3.Notifier, status v3.NotifierStatus) (v3.NotifierStatus, error)

type NotifierGeneratingHandler func(obj *v3.Notifier, status v3.NotifierStatus) ([]runtime.Object, v3.NotifierStatus, error)

func FromNotifierHandlerToHandler(sync NotifierHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.Notifier](sync))
}

func RegisterNotifierStatusHandler(ctx context.Context, controller NotifierController, condition condition.Cond, name string, handler NotifierStatusHandler) {
	statusHandler := &notifierStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromNotifierHandlerToHandler(statusHandler.sync))
}

func RegisterNotifierGeneratingHandler(ctx context.Context, controller NotifierController, apply apply.Apply,
	condition condition.Cond, name string, handler NotifierGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &notifierGeneratingHandler{
		NotifierGeneratingHandler: handler,
		apply:                     apply,
		name:                      name,
		gvk:                       controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterNotifierStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type notifierStatusHandler struct {
	client    NotifierClient
	condition condition.Cond
	handler   NotifierStatusHandler
}

func (a *notifierStatusHandler) sync(key string, obj *v3.Notifier) (*v3.Notifier, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type notifierGeneratingHandler struct {
	NotifierGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *notifierGeneratingHandler) Remove(key string, obj *v3.Notifier) (*v3.Notifier, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.Notifier{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *notifierGeneratingHandler) Handle(obj *v3.Notifier, status v3.NotifierStatus) (v3.NotifierStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.NotifierGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
