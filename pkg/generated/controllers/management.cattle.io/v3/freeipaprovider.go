/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type FreeIpaProviderHandler func(string, *v3.FreeIpaProvider) (*v3.FreeIpaProvider, error)

type FreeIpaProviderController interface {
	generic.ControllerMeta
	FreeIpaProviderClient

	OnChange(ctx context.Context, name string, sync FreeIpaProviderHandler)
	OnRemove(ctx context.Context, name string, sync FreeIpaProviderHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() FreeIpaProviderCache
}

type FreeIpaProviderClient interface {
	Create(*v3.FreeIpaProvider) (*v3.FreeIpaProvider, error)
	Update(*v3.FreeIpaProvider) (*v3.FreeIpaProvider, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v3.FreeIpaProvider, error)
	List(opts metav1.ListOptions) (*v3.FreeIpaProviderList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.FreeIpaProvider, err error)
}

type FreeIpaProviderCache interface {
	Get(name string) (*v3.FreeIpaProvider, error)
	List(selector labels.Selector) ([]*v3.FreeIpaProvider, error)

	AddIndexer(indexName string, indexer FreeIpaProviderIndexer)
	GetByIndex(indexName, key string) ([]*v3.FreeIpaProvider, error)
}

type FreeIpaProviderIndexer func(obj *v3.FreeIpaProvider) ([]string, error)

type FreeIpaProviderGenericController struct {
	generic.NonNamespacedControllerInterface[*v3.FreeIpaProvider, *v3.FreeIpaProviderList]
}

func (c *FreeIpaProviderGenericController) OnChange(ctx context.Context, name string, sync FreeIpaProviderHandler) {
	c.NonNamespacedControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.FreeIpaProvider](sync))
}

func (c *FreeIpaProviderGenericController) OnRemove(ctx context.Context, name string, sync FreeIpaProviderHandler) {
	c.NonNamespacedControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.FreeIpaProvider](sync))
}

func (c *FreeIpaProviderGenericController) Cache() FreeIpaProviderCache {
	return &FreeIpaProviderGenericCache{
		c.NonNamespacedControllerInterface.Cache(),
	}
}

type FreeIpaProviderGenericCache struct {
	generic.NonNamespacedCacheInterface[*v3.FreeIpaProvider]
}

func (c FreeIpaProviderGenericCache) AddIndexer(indexName string, indexer FreeIpaProviderIndexer) {
	c.NonNamespacedCacheInterface.AddIndexer(indexName, generic.Indexer[*v3.FreeIpaProvider](indexer))
}
