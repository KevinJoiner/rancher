/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type ClusterRegistrationTokenHandler func(string, *v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error)

type ClusterRegistrationTokenController interface {
	generic.ControllerMeta
	ClusterRegistrationTokenClient

	OnChange(ctx context.Context, name string, sync ClusterRegistrationTokenHandler)
	OnRemove(ctx context.Context, name string, sync ClusterRegistrationTokenHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ClusterRegistrationTokenCache
}

type ClusterRegistrationTokenClient interface {
	Create(*v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error)
	Update(*v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error)
	UpdateStatus(*v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.ClusterRegistrationToken, error)
	List(namespace string, opts metav1.ListOptions) (*v3.ClusterRegistrationTokenList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.ClusterRegistrationToken, err error)
}

type ClusterRegistrationTokenCache interface {
	Get(namespace, name string) (*v3.ClusterRegistrationToken, error)
	List(namespace string, selector labels.Selector) ([]*v3.ClusterRegistrationToken, error)

	AddIndexer(indexName string, indexer ClusterRegistrationTokenIndexer)
	GetByIndex(indexName, key string) ([]*v3.ClusterRegistrationToken, error)
}

type ClusterRegistrationTokenIndexer func(obj *v3.ClusterRegistrationToken) ([]string, error)

type ClusterRegistrationTokenGenericController struct {
	generic.ControllerInterface[*v3.ClusterRegistrationToken, *v3.ClusterRegistrationTokenList]
}

func (c *ClusterRegistrationTokenGenericController) OnChange(ctx context.Context, name string, sync ClusterRegistrationTokenHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.ClusterRegistrationToken](sync))
}

func (c *ClusterRegistrationTokenGenericController) OnRemove(ctx context.Context, name string, sync ClusterRegistrationTokenHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.ClusterRegistrationToken](sync))
}

func (c *ClusterRegistrationTokenGenericController) Cache() ClusterRegistrationTokenCache {
	return &ClusterRegistrationTokenGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type ClusterRegistrationTokenGenericCache struct {
	generic.CacheInterface[*v3.ClusterRegistrationToken]
}

func (c ClusterRegistrationTokenGenericCache) AddIndexer(indexName string, indexer ClusterRegistrationTokenIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.ClusterRegistrationToken](indexer))
}

type ClusterRegistrationTokenStatusHandler func(obj *v3.ClusterRegistrationToken, status v3.ClusterRegistrationTokenStatus) (v3.ClusterRegistrationTokenStatus, error)

type ClusterRegistrationTokenGeneratingHandler func(obj *v3.ClusterRegistrationToken, status v3.ClusterRegistrationTokenStatus) ([]runtime.Object, v3.ClusterRegistrationTokenStatus, error)

func FromClusterRegistrationTokenHandlerToHandler(sync ClusterRegistrationTokenHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.ClusterRegistrationToken](sync))
}

func RegisterClusterRegistrationTokenStatusHandler(ctx context.Context, controller ClusterRegistrationTokenController, condition condition.Cond, name string, handler ClusterRegistrationTokenStatusHandler) {
	statusHandler := &clusterRegistrationTokenStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromClusterRegistrationTokenHandlerToHandler(statusHandler.sync))
}

func RegisterClusterRegistrationTokenGeneratingHandler(ctx context.Context, controller ClusterRegistrationTokenController, apply apply.Apply,
	condition condition.Cond, name string, handler ClusterRegistrationTokenGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &clusterRegistrationTokenGeneratingHandler{
		ClusterRegistrationTokenGeneratingHandler: handler,
		apply: apply,
		name:  name,
		gvk:   controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterClusterRegistrationTokenStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type clusterRegistrationTokenStatusHandler struct {
	client    ClusterRegistrationTokenClient
	condition condition.Cond
	handler   ClusterRegistrationTokenStatusHandler
}

func (a *clusterRegistrationTokenStatusHandler) sync(key string, obj *v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type clusterRegistrationTokenGeneratingHandler struct {
	ClusterRegistrationTokenGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *clusterRegistrationTokenGeneratingHandler) Remove(key string, obj *v3.ClusterRegistrationToken) (*v3.ClusterRegistrationToken, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.ClusterRegistrationToken{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *clusterRegistrationTokenGeneratingHandler) Handle(obj *v3.ClusterRegistrationToken, status v3.ClusterRegistrationTokenStatus) (v3.ClusterRegistrationTokenStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.ClusterRegistrationTokenGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
