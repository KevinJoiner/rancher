/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type MultiClusterAppRevisionHandler func(string, *v3.MultiClusterAppRevision) (*v3.MultiClusterAppRevision, error)

type MultiClusterAppRevisionController interface {
	generic.ControllerMeta
	MultiClusterAppRevisionClient

	OnChange(ctx context.Context, name string, sync MultiClusterAppRevisionHandler)
	OnRemove(ctx context.Context, name string, sync MultiClusterAppRevisionHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() MultiClusterAppRevisionCache
}

type MultiClusterAppRevisionClient interface {
	Create(*v3.MultiClusterAppRevision) (*v3.MultiClusterAppRevision, error)
	Update(*v3.MultiClusterAppRevision) (*v3.MultiClusterAppRevision, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.MultiClusterAppRevision, error)
	List(namespace string, opts metav1.ListOptions) (*v3.MultiClusterAppRevisionList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.MultiClusterAppRevision, err error)
}

type MultiClusterAppRevisionCache interface {
	Get(namespace, name string) (*v3.MultiClusterAppRevision, error)
	List(namespace string, selector labels.Selector) ([]*v3.MultiClusterAppRevision, error)

	AddIndexer(indexName string, indexer MultiClusterAppRevisionIndexer)
	GetByIndex(indexName, key string) ([]*v3.MultiClusterAppRevision, error)
}

type MultiClusterAppRevisionIndexer func(obj *v3.MultiClusterAppRevision) ([]string, error)

type MultiClusterAppRevisionGenericController struct {
	generic.ControllerInterface[*v3.MultiClusterAppRevision, *v3.MultiClusterAppRevisionList]
}

func (c *MultiClusterAppRevisionGenericController) OnChange(ctx context.Context, name string, sync MultiClusterAppRevisionHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.MultiClusterAppRevision](sync))
}

func (c *MultiClusterAppRevisionGenericController) OnRemove(ctx context.Context, name string, sync MultiClusterAppRevisionHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.MultiClusterAppRevision](sync))
}

func (c *MultiClusterAppRevisionGenericController) Cache() MultiClusterAppRevisionCache {
	return &MultiClusterAppRevisionGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type MultiClusterAppRevisionGenericCache struct {
	generic.CacheInterface[*v3.MultiClusterAppRevision]
}

func (c MultiClusterAppRevisionGenericCache) AddIndexer(indexName string, indexer MultiClusterAppRevisionIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.MultiClusterAppRevision](indexer))
}
