/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type ClusterAlertRuleHandler func(string, *v3.ClusterAlertRule) (*v3.ClusterAlertRule, error)

type ClusterAlertRuleController interface {
	generic.ControllerMeta
	ClusterAlertRuleClient

	OnChange(ctx context.Context, name string, sync ClusterAlertRuleHandler)
	OnRemove(ctx context.Context, name string, sync ClusterAlertRuleHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ClusterAlertRuleCache
}

type ClusterAlertRuleClient interface {
	Create(*v3.ClusterAlertRule) (*v3.ClusterAlertRule, error)
	Update(*v3.ClusterAlertRule) (*v3.ClusterAlertRule, error)
	UpdateStatus(*v3.ClusterAlertRule) (*v3.ClusterAlertRule, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.ClusterAlertRule, error)
	List(namespace string, opts metav1.ListOptions) (*v3.ClusterAlertRuleList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.ClusterAlertRule, err error)
}

type ClusterAlertRuleCache interface {
	Get(namespace, name string) (*v3.ClusterAlertRule, error)
	List(namespace string, selector labels.Selector) ([]*v3.ClusterAlertRule, error)

	AddIndexer(indexName string, indexer ClusterAlertRuleIndexer)
	GetByIndex(indexName, key string) ([]*v3.ClusterAlertRule, error)
}

type ClusterAlertRuleIndexer func(obj *v3.ClusterAlertRule) ([]string, error)

type ClusterAlertRuleGenericController struct {
	generic.ControllerInterface[*v3.ClusterAlertRule, *v3.ClusterAlertRuleList]
}

func (c *ClusterAlertRuleGenericController) OnChange(ctx context.Context, name string, sync ClusterAlertRuleHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.ClusterAlertRule](sync))
}

func (c *ClusterAlertRuleGenericController) OnRemove(ctx context.Context, name string, sync ClusterAlertRuleHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.ClusterAlertRule](sync))
}

func (c *ClusterAlertRuleGenericController) Cache() ClusterAlertRuleCache {
	return &ClusterAlertRuleGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type ClusterAlertRuleGenericCache struct {
	generic.CacheInterface[*v3.ClusterAlertRule]
}

func (c ClusterAlertRuleGenericCache) AddIndexer(indexName string, indexer ClusterAlertRuleIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.ClusterAlertRule](indexer))
}

type ClusterAlertRuleStatusHandler func(obj *v3.ClusterAlertRule, status v3.AlertStatus) (v3.AlertStatus, error)

type ClusterAlertRuleGeneratingHandler func(obj *v3.ClusterAlertRule, status v3.AlertStatus) ([]runtime.Object, v3.AlertStatus, error)

func FromClusterAlertRuleHandlerToHandler(sync ClusterAlertRuleHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.ClusterAlertRule](sync))
}

func RegisterClusterAlertRuleStatusHandler(ctx context.Context, controller ClusterAlertRuleController, condition condition.Cond, name string, handler ClusterAlertRuleStatusHandler) {
	statusHandler := &clusterAlertRuleStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromClusterAlertRuleHandlerToHandler(statusHandler.sync))
}

func RegisterClusterAlertRuleGeneratingHandler(ctx context.Context, controller ClusterAlertRuleController, apply apply.Apply,
	condition condition.Cond, name string, handler ClusterAlertRuleGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &clusterAlertRuleGeneratingHandler{
		ClusterAlertRuleGeneratingHandler: handler,
		apply:                             apply,
		name:                              name,
		gvk:                               controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterClusterAlertRuleStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type clusterAlertRuleStatusHandler struct {
	client    ClusterAlertRuleClient
	condition condition.Cond
	handler   ClusterAlertRuleStatusHandler
}

func (a *clusterAlertRuleStatusHandler) sync(key string, obj *v3.ClusterAlertRule) (*v3.ClusterAlertRule, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type clusterAlertRuleGeneratingHandler struct {
	ClusterAlertRuleGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *clusterAlertRuleGeneratingHandler) Remove(key string, obj *v3.ClusterAlertRule) (*v3.ClusterAlertRule, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.ClusterAlertRule{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *clusterAlertRuleGeneratingHandler) Handle(obj *v3.ClusterAlertRule, status v3.AlertStatus) (v3.AlertStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.ClusterAlertRuleGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
