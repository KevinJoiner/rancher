/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type KontainerDriverHandler func(string, *v3.KontainerDriver) (*v3.KontainerDriver, error)

type KontainerDriverController interface {
	generic.ControllerMeta
	KontainerDriverClient

	OnChange(ctx context.Context, name string, sync KontainerDriverHandler)
	OnRemove(ctx context.Context, name string, sync KontainerDriverHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() KontainerDriverCache
}

type KontainerDriverClient interface {
	Create(*v3.KontainerDriver) (*v3.KontainerDriver, error)
	Update(*v3.KontainerDriver) (*v3.KontainerDriver, error)
	UpdateStatus(*v3.KontainerDriver) (*v3.KontainerDriver, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v3.KontainerDriver, error)
	List(opts metav1.ListOptions) (*v3.KontainerDriverList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.KontainerDriver, err error)
}

type KontainerDriverCache interface {
	Get(name string) (*v3.KontainerDriver, error)
	List(selector labels.Selector) ([]*v3.KontainerDriver, error)

	AddIndexer(indexName string, indexer KontainerDriverIndexer)
	GetByIndex(indexName, key string) ([]*v3.KontainerDriver, error)
}

type KontainerDriverIndexer func(obj *v3.KontainerDriver) ([]string, error)

type KontainerDriverGenericController struct {
	generic.NonNamespacedControllerInterface[*v3.KontainerDriver, *v3.KontainerDriverList]
}

func (c *KontainerDriverGenericController) OnChange(ctx context.Context, name string, sync KontainerDriverHandler) {
	c.NonNamespacedControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.KontainerDriver](sync))
}

func (c *KontainerDriverGenericController) OnRemove(ctx context.Context, name string, sync KontainerDriverHandler) {
	c.NonNamespacedControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.KontainerDriver](sync))
}

func (c *KontainerDriverGenericController) Cache() KontainerDriverCache {
	return &KontainerDriverGenericCache{
		c.NonNamespacedControllerInterface.Cache(),
	}
}

type KontainerDriverGenericCache struct {
	generic.NonNamespacedCacheInterface[*v3.KontainerDriver]
}

func (c KontainerDriverGenericCache) AddIndexer(indexName string, indexer KontainerDriverIndexer) {
	c.NonNamespacedCacheInterface.AddIndexer(indexName, generic.Indexer[*v3.KontainerDriver](indexer))
}

type KontainerDriverStatusHandler func(obj *v3.KontainerDriver, status v3.KontainerDriverStatus) (v3.KontainerDriverStatus, error)

type KontainerDriverGeneratingHandler func(obj *v3.KontainerDriver, status v3.KontainerDriverStatus) ([]runtime.Object, v3.KontainerDriverStatus, error)

func FromKontainerDriverHandlerToHandler(sync KontainerDriverHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.KontainerDriver](sync))
}

func RegisterKontainerDriverStatusHandler(ctx context.Context, controller KontainerDriverController, condition condition.Cond, name string, handler KontainerDriverStatusHandler) {
	statusHandler := &kontainerDriverStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromKontainerDriverHandlerToHandler(statusHandler.sync))
}

func RegisterKontainerDriverGeneratingHandler(ctx context.Context, controller KontainerDriverController, apply apply.Apply,
	condition condition.Cond, name string, handler KontainerDriverGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &kontainerDriverGeneratingHandler{
		KontainerDriverGeneratingHandler: handler,
		apply:                            apply,
		name:                             name,
		gvk:                              controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterKontainerDriverStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type kontainerDriverStatusHandler struct {
	client    KontainerDriverClient
	condition condition.Cond
	handler   KontainerDriverStatusHandler
}

func (a *kontainerDriverStatusHandler) sync(key string, obj *v3.KontainerDriver) (*v3.KontainerDriver, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type kontainerDriverGeneratingHandler struct {
	KontainerDriverGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *kontainerDriverGeneratingHandler) Remove(key string, obj *v3.KontainerDriver) (*v3.KontainerDriver, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.KontainerDriver{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *kontainerDriverGeneratingHandler) Handle(obj *v3.KontainerDriver, status v3.KontainerDriverStatus) (v3.KontainerDriverStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.KontainerDriverGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
