/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type ProjectHandler func(string, *v3.Project) (*v3.Project, error)

type ProjectController interface {
	generic.ControllerMeta
	ProjectClient

	OnChange(ctx context.Context, name string, sync ProjectHandler)
	OnRemove(ctx context.Context, name string, sync ProjectHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ProjectCache
}

type ProjectClient interface {
	Create(*v3.Project) (*v3.Project, error)
	Update(*v3.Project) (*v3.Project, error)
	UpdateStatus(*v3.Project) (*v3.Project, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.Project, error)
	List(namespace string, opts metav1.ListOptions) (*v3.ProjectList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.Project, err error)
}

type ProjectCache interface {
	Get(namespace, name string) (*v3.Project, error)
	List(namespace string, selector labels.Selector) ([]*v3.Project, error)

	AddIndexer(indexName string, indexer ProjectIndexer)
	GetByIndex(indexName, key string) ([]*v3.Project, error)
}

type ProjectIndexer func(obj *v3.Project) ([]string, error)

type ProjectGenericController struct {
	generic.ControllerInterface[*v3.Project, *v3.ProjectList]
}

func (c *ProjectGenericController) OnChange(ctx context.Context, name string, sync ProjectHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.Project](sync))
}

func (c *ProjectGenericController) OnRemove(ctx context.Context, name string, sync ProjectHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.Project](sync))
}

func (c *ProjectGenericController) Cache() ProjectCache {
	return &ProjectGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type ProjectGenericCache struct {
	generic.CacheInterface[*v3.Project]
}

func (c ProjectGenericCache) AddIndexer(indexName string, indexer ProjectIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.Project](indexer))
}

type ProjectStatusHandler func(obj *v3.Project, status v3.ProjectStatus) (v3.ProjectStatus, error)

type ProjectGeneratingHandler func(obj *v3.Project, status v3.ProjectStatus) ([]runtime.Object, v3.ProjectStatus, error)

func FromProjectHandlerToHandler(sync ProjectHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.Project](sync))
}

func RegisterProjectStatusHandler(ctx context.Context, controller ProjectController, condition condition.Cond, name string, handler ProjectStatusHandler) {
	statusHandler := &projectStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromProjectHandlerToHandler(statusHandler.sync))
}

func RegisterProjectGeneratingHandler(ctx context.Context, controller ProjectController, apply apply.Apply,
	condition condition.Cond, name string, handler ProjectGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &projectGeneratingHandler{
		ProjectGeneratingHandler: handler,
		apply:                    apply,
		name:                     name,
		gvk:                      controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterProjectStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type projectStatusHandler struct {
	client    ProjectClient
	condition condition.Cond
	handler   ProjectStatusHandler
}

func (a *projectStatusHandler) sync(key string, obj *v3.Project) (*v3.Project, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type projectGeneratingHandler struct {
	ProjectGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *projectGeneratingHandler) Remove(key string, obj *v3.Project) (*v3.Project, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.Project{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *projectGeneratingHandler) Handle(obj *v3.Project, status v3.ProjectStatus) (v3.ProjectStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.ProjectGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
