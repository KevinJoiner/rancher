/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type RkeK8sServiceOptionHandler func(string, *v3.RkeK8sServiceOption) (*v3.RkeK8sServiceOption, error)

type RkeK8sServiceOptionController interface {
	generic.ControllerMeta
	RkeK8sServiceOptionClient

	OnChange(ctx context.Context, name string, sync RkeK8sServiceOptionHandler)
	OnRemove(ctx context.Context, name string, sync RkeK8sServiceOptionHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() RkeK8sServiceOptionCache
}

type RkeK8sServiceOptionClient interface {
	Create(*v3.RkeK8sServiceOption) (*v3.RkeK8sServiceOption, error)
	Update(*v3.RkeK8sServiceOption) (*v3.RkeK8sServiceOption, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.RkeK8sServiceOption, error)
	List(namespace string, opts metav1.ListOptions) (*v3.RkeK8sServiceOptionList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.RkeK8sServiceOption, err error)
}

type RkeK8sServiceOptionCache interface {
	Get(namespace, name string) (*v3.RkeK8sServiceOption, error)
	List(namespace string, selector labels.Selector) ([]*v3.RkeK8sServiceOption, error)

	AddIndexer(indexName string, indexer RkeK8sServiceOptionIndexer)
	GetByIndex(indexName, key string) ([]*v3.RkeK8sServiceOption, error)
}

type RkeK8sServiceOptionIndexer func(obj *v3.RkeK8sServiceOption) ([]string, error)

type RkeK8sServiceOptionGenericController struct {
	generic.ControllerInterface[*v3.RkeK8sServiceOption, *v3.RkeK8sServiceOptionList]
}

func (c *RkeK8sServiceOptionGenericController) OnChange(ctx context.Context, name string, sync RkeK8sServiceOptionHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.RkeK8sServiceOption](sync))
}

func (c *RkeK8sServiceOptionGenericController) OnRemove(ctx context.Context, name string, sync RkeK8sServiceOptionHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.RkeK8sServiceOption](sync))
}

func (c *RkeK8sServiceOptionGenericController) Cache() RkeK8sServiceOptionCache {
	return &RkeK8sServiceOptionGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type RkeK8sServiceOptionGenericCache struct {
	generic.CacheInterface[*v3.RkeK8sServiceOption]
}

func (c RkeK8sServiceOptionGenericCache) AddIndexer(indexName string, indexer RkeK8sServiceOptionIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.RkeK8sServiceOption](indexer))
}
