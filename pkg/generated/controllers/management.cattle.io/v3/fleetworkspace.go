/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type FleetWorkspaceHandler func(string, *v3.FleetWorkspace) (*v3.FleetWorkspace, error)

type FleetWorkspaceController interface {
	generic.ControllerMeta
	FleetWorkspaceClient

	OnChange(ctx context.Context, name string, sync FleetWorkspaceHandler)
	OnRemove(ctx context.Context, name string, sync FleetWorkspaceHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() FleetWorkspaceCache
}

type FleetWorkspaceClient interface {
	Create(*v3.FleetWorkspace) (*v3.FleetWorkspace, error)
	Update(*v3.FleetWorkspace) (*v3.FleetWorkspace, error)
	UpdateStatus(*v3.FleetWorkspace) (*v3.FleetWorkspace, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v3.FleetWorkspace, error)
	List(opts metav1.ListOptions) (*v3.FleetWorkspaceList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.FleetWorkspace, err error)
}

type FleetWorkspaceCache interface {
	Get(name string) (*v3.FleetWorkspace, error)
	List(selector labels.Selector) ([]*v3.FleetWorkspace, error)

	AddIndexer(indexName string, indexer FleetWorkspaceIndexer)
	GetByIndex(indexName, key string) ([]*v3.FleetWorkspace, error)
}

type FleetWorkspaceIndexer func(obj *v3.FleetWorkspace) ([]string, error)

type FleetWorkspaceGenericController struct {
	generic.NonNamespacedControllerInterface[*v3.FleetWorkspace, *v3.FleetWorkspaceList]
}

func (c *FleetWorkspaceGenericController) OnChange(ctx context.Context, name string, sync FleetWorkspaceHandler) {
	c.NonNamespacedControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.FleetWorkspace](sync))
}

func (c *FleetWorkspaceGenericController) OnRemove(ctx context.Context, name string, sync FleetWorkspaceHandler) {
	c.NonNamespacedControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.FleetWorkspace](sync))
}

func (c *FleetWorkspaceGenericController) Cache() FleetWorkspaceCache {
	return &FleetWorkspaceGenericCache{
		c.NonNamespacedControllerInterface.Cache(),
	}
}

type FleetWorkspaceGenericCache struct {
	generic.NonNamespacedCacheInterface[*v3.FleetWorkspace]
}

func (c FleetWorkspaceGenericCache) AddIndexer(indexName string, indexer FleetWorkspaceIndexer) {
	c.NonNamespacedCacheInterface.AddIndexer(indexName, generic.Indexer[*v3.FleetWorkspace](indexer))
}

type FleetWorkspaceStatusHandler func(obj *v3.FleetWorkspace, status v3.FleetWorkspaceStatus) (v3.FleetWorkspaceStatus, error)

type FleetWorkspaceGeneratingHandler func(obj *v3.FleetWorkspace, status v3.FleetWorkspaceStatus) ([]runtime.Object, v3.FleetWorkspaceStatus, error)

func FromFleetWorkspaceHandlerToHandler(sync FleetWorkspaceHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.FleetWorkspace](sync))
}

func RegisterFleetWorkspaceStatusHandler(ctx context.Context, controller FleetWorkspaceController, condition condition.Cond, name string, handler FleetWorkspaceStatusHandler) {
	statusHandler := &fleetWorkspaceStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromFleetWorkspaceHandlerToHandler(statusHandler.sync))
}

func RegisterFleetWorkspaceGeneratingHandler(ctx context.Context, controller FleetWorkspaceController, apply apply.Apply,
	condition condition.Cond, name string, handler FleetWorkspaceGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &fleetWorkspaceGeneratingHandler{
		FleetWorkspaceGeneratingHandler: handler,
		apply:                           apply,
		name:                            name,
		gvk:                             controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterFleetWorkspaceStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type fleetWorkspaceStatusHandler struct {
	client    FleetWorkspaceClient
	condition condition.Cond
	handler   FleetWorkspaceStatusHandler
}

func (a *fleetWorkspaceStatusHandler) sync(key string, obj *v3.FleetWorkspace) (*v3.FleetWorkspace, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type fleetWorkspaceGeneratingHandler struct {
	FleetWorkspaceGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *fleetWorkspaceGeneratingHandler) Remove(key string, obj *v3.FleetWorkspace) (*v3.FleetWorkspace, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.FleetWorkspace{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *fleetWorkspaceGeneratingHandler) Handle(obj *v3.FleetWorkspace, status v3.FleetWorkspaceStatus) (v3.FleetWorkspaceStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.FleetWorkspaceGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
