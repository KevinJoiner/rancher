/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type OIDCProviderHandler func(string, *v3.OIDCProvider) (*v3.OIDCProvider, error)

type OIDCProviderController interface {
	generic.ControllerMeta
	OIDCProviderClient

	OnChange(ctx context.Context, name string, sync OIDCProviderHandler)
	OnRemove(ctx context.Context, name string, sync OIDCProviderHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() OIDCProviderCache
}

type OIDCProviderClient interface {
	Create(*v3.OIDCProvider) (*v3.OIDCProvider, error)
	Update(*v3.OIDCProvider) (*v3.OIDCProvider, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v3.OIDCProvider, error)
	List(opts metav1.ListOptions) (*v3.OIDCProviderList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.OIDCProvider, err error)
}

type OIDCProviderCache interface {
	Get(name string) (*v3.OIDCProvider, error)
	List(selector labels.Selector) ([]*v3.OIDCProvider, error)

	AddIndexer(indexName string, indexer OIDCProviderIndexer)
	GetByIndex(indexName, key string) ([]*v3.OIDCProvider, error)
}

type OIDCProviderIndexer func(obj *v3.OIDCProvider) ([]string, error)

type OIDCProviderGenericController struct {
	generic.NonNamespacedControllerInterface[*v3.OIDCProvider, *v3.OIDCProviderList]
}

func (c *OIDCProviderGenericController) OnChange(ctx context.Context, name string, sync OIDCProviderHandler) {
	c.NonNamespacedControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.OIDCProvider](sync))
}

func (c *OIDCProviderGenericController) OnRemove(ctx context.Context, name string, sync OIDCProviderHandler) {
	c.NonNamespacedControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.OIDCProvider](sync))
}

func (c *OIDCProviderGenericController) Cache() OIDCProviderCache {
	return &OIDCProviderGenericCache{
		c.NonNamespacedControllerInterface.Cache(),
	}
}

type OIDCProviderGenericCache struct {
	generic.NonNamespacedCacheInterface[*v3.OIDCProvider]
}

func (c OIDCProviderGenericCache) AddIndexer(indexName string, indexer OIDCProviderIndexer) {
	c.NonNamespacedCacheInterface.AddIndexer(indexName, generic.Indexer[*v3.OIDCProvider](indexer))
}
