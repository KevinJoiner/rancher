/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type UserAttributeHandler func(string, *v3.UserAttribute) (*v3.UserAttribute, error)

type UserAttributeController interface {
	generic.ControllerMeta
	UserAttributeClient

	OnChange(ctx context.Context, name string, sync UserAttributeHandler)
	OnRemove(ctx context.Context, name string, sync UserAttributeHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() UserAttributeCache
}

type UserAttributeClient interface {
	Create(*v3.UserAttribute) (*v3.UserAttribute, error)
	Update(*v3.UserAttribute) (*v3.UserAttribute, error)

	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v3.UserAttribute, error)
	List(opts metav1.ListOptions) (*v3.UserAttributeList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.UserAttribute, err error)
}

type UserAttributeCache interface {
	Get(name string) (*v3.UserAttribute, error)
	List(selector labels.Selector) ([]*v3.UserAttribute, error)

	AddIndexer(indexName string, indexer UserAttributeIndexer)
	GetByIndex(indexName, key string) ([]*v3.UserAttribute, error)
}

type UserAttributeIndexer func(obj *v3.UserAttribute) ([]string, error)

type UserAttributeGenericController struct {
	generic.NonNamespacedControllerInterface[*v3.UserAttribute, *v3.UserAttributeList]
}

func (c *UserAttributeGenericController) OnChange(ctx context.Context, name string, sync UserAttributeHandler) {
	c.NonNamespacedControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.UserAttribute](sync))
}

func (c *UserAttributeGenericController) OnRemove(ctx context.Context, name string, sync UserAttributeHandler) {
	c.NonNamespacedControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.UserAttribute](sync))
}

func (c *UserAttributeGenericController) Cache() UserAttributeCache {
	return &UserAttributeGenericCache{
		c.NonNamespacedControllerInterface.Cache(),
	}
}

type UserAttributeGenericCache struct {
	generic.NonNamespacedCacheInterface[*v3.UserAttribute]
}

func (c UserAttributeGenericCache) AddIndexer(indexName string, indexer UserAttributeIndexer) {
	c.NonNamespacedCacheInterface.AddIndexer(indexName, generic.Indexer[*v3.UserAttribute](indexer))
}
