/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type APIServiceHandler func(string, *v3.APIService) (*v3.APIService, error)

type APIServiceController interface {
	generic.ControllerMeta
	APIServiceClient

	OnChange(ctx context.Context, name string, sync APIServiceHandler)
	OnRemove(ctx context.Context, name string, sync APIServiceHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() APIServiceCache
}

type APIServiceClient interface {
	Create(*v3.APIService) (*v3.APIService, error)
	Update(*v3.APIService) (*v3.APIService, error)
	UpdateStatus(*v3.APIService) (*v3.APIService, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v3.APIService, error)
	List(opts metav1.ListOptions) (*v3.APIServiceList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.APIService, err error)
}

type APIServiceCache interface {
	Get(name string) (*v3.APIService, error)
	List(selector labels.Selector) ([]*v3.APIService, error)

	AddIndexer(indexName string, indexer APIServiceIndexer)
	GetByIndex(indexName, key string) ([]*v3.APIService, error)
}

type APIServiceIndexer func(obj *v3.APIService) ([]string, error)

type APIServiceGenericController struct {
	generic.NonNamespacedControllerInterface[*v3.APIService, *v3.APIServiceList]
}

func (c *APIServiceGenericController) OnChange(ctx context.Context, name string, sync APIServiceHandler) {
	c.NonNamespacedControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.APIService](sync))
}

func (c *APIServiceGenericController) OnRemove(ctx context.Context, name string, sync APIServiceHandler) {
	c.NonNamespacedControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.APIService](sync))
}

func (c *APIServiceGenericController) Cache() APIServiceCache {
	return &APIServiceGenericCache{
		c.NonNamespacedControllerInterface.Cache(),
	}
}

type APIServiceGenericCache struct {
	generic.NonNamespacedCacheInterface[*v3.APIService]
}

func (c APIServiceGenericCache) AddIndexer(indexName string, indexer APIServiceIndexer) {
	c.NonNamespacedCacheInterface.AddIndexer(indexName, generic.Indexer[*v3.APIService](indexer))
}

type APIServiceStatusHandler func(obj *v3.APIService, status v3.APIServiceStatus) (v3.APIServiceStatus, error)

type APIServiceGeneratingHandler func(obj *v3.APIService, status v3.APIServiceStatus) ([]runtime.Object, v3.APIServiceStatus, error)

func FromAPIServiceHandlerToHandler(sync APIServiceHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.APIService](sync))
}

func RegisterAPIServiceStatusHandler(ctx context.Context, controller APIServiceController, condition condition.Cond, name string, handler APIServiceStatusHandler) {
	statusHandler := &aPIServiceStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromAPIServiceHandlerToHandler(statusHandler.sync))
}

func RegisterAPIServiceGeneratingHandler(ctx context.Context, controller APIServiceController, apply apply.Apply,
	condition condition.Cond, name string, handler APIServiceGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &aPIServiceGeneratingHandler{
		APIServiceGeneratingHandler: handler,
		apply:                       apply,
		name:                        name,
		gvk:                         controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterAPIServiceStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type aPIServiceStatusHandler struct {
	client    APIServiceClient
	condition condition.Cond
	handler   APIServiceStatusHandler
}

func (a *aPIServiceStatusHandler) sync(key string, obj *v3.APIService) (*v3.APIService, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type aPIServiceGeneratingHandler struct {
	APIServiceGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *aPIServiceGeneratingHandler) Remove(key string, obj *v3.APIService) (*v3.APIService, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.APIService{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *aPIServiceGeneratingHandler) Handle(obj *v3.APIService, status v3.APIServiceStatus) (v3.APIServiceStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.APIServiceGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
