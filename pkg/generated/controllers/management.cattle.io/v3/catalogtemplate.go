/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/management.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type CatalogTemplateHandler func(string, *v3.CatalogTemplate) (*v3.CatalogTemplate, error)

type CatalogTemplateController interface {
	generic.ControllerMeta
	CatalogTemplateClient

	OnChange(ctx context.Context, name string, sync CatalogTemplateHandler)
	OnRemove(ctx context.Context, name string, sync CatalogTemplateHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() CatalogTemplateCache
}

type CatalogTemplateClient interface {
	Create(*v3.CatalogTemplate) (*v3.CatalogTemplate, error)
	Update(*v3.CatalogTemplate) (*v3.CatalogTemplate, error)
	UpdateStatus(*v3.CatalogTemplate) (*v3.CatalogTemplate, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.CatalogTemplate, error)
	List(namespace string, opts metav1.ListOptions) (*v3.CatalogTemplateList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.CatalogTemplate, err error)
}

type CatalogTemplateCache interface {
	Get(namespace, name string) (*v3.CatalogTemplate, error)
	List(namespace string, selector labels.Selector) ([]*v3.CatalogTemplate, error)

	AddIndexer(indexName string, indexer CatalogTemplateIndexer)
	GetByIndex(indexName, key string) ([]*v3.CatalogTemplate, error)
}

type CatalogTemplateIndexer func(obj *v3.CatalogTemplate) ([]string, error)

type CatalogTemplateGenericController struct {
	generic.ControllerInterface[*v3.CatalogTemplate, *v3.CatalogTemplateList]
}

func (c *CatalogTemplateGenericController) OnChange(ctx context.Context, name string, sync CatalogTemplateHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.CatalogTemplate](sync))
}

func (c *CatalogTemplateGenericController) OnRemove(ctx context.Context, name string, sync CatalogTemplateHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.CatalogTemplate](sync))
}

func (c *CatalogTemplateGenericController) Cache() CatalogTemplateCache {
	return &CatalogTemplateGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type CatalogTemplateGenericCache struct {
	generic.CacheInterface[*v3.CatalogTemplate]
}

func (c CatalogTemplateGenericCache) AddIndexer(indexName string, indexer CatalogTemplateIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.CatalogTemplate](indexer))
}

type CatalogTemplateStatusHandler func(obj *v3.CatalogTemplate, status v3.TemplateStatus) (v3.TemplateStatus, error)

type CatalogTemplateGeneratingHandler func(obj *v3.CatalogTemplate, status v3.TemplateStatus) ([]runtime.Object, v3.TemplateStatus, error)

func FromCatalogTemplateHandlerToHandler(sync CatalogTemplateHandler) generic.Handler {
	return generic.FromObjectHandlerToHandler(generic.ObjectHandler[*v3.CatalogTemplate](sync))
}

func RegisterCatalogTemplateStatusHandler(ctx context.Context, controller CatalogTemplateController, condition condition.Cond, name string, handler CatalogTemplateStatusHandler) {
	statusHandler := &catalogTemplateStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromCatalogTemplateHandlerToHandler(statusHandler.sync))
}

func RegisterCatalogTemplateGeneratingHandler(ctx context.Context, controller CatalogTemplateController, apply apply.Apply,
	condition condition.Cond, name string, handler CatalogTemplateGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &catalogTemplateGeneratingHandler{
		CatalogTemplateGeneratingHandler: handler,
		apply:                            apply,
		name:                             name,
		gvk:                              controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterCatalogTemplateStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type catalogTemplateStatusHandler struct {
	client    CatalogTemplateClient
	condition condition.Cond
	handler   CatalogTemplateStatusHandler
}

func (a *catalogTemplateStatusHandler) sync(key string, obj *v3.CatalogTemplate) (*v3.CatalogTemplate, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type catalogTemplateGeneratingHandler struct {
	CatalogTemplateGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *catalogTemplateGeneratingHandler) Remove(key string, obj *v3.CatalogTemplate) (*v3.CatalogTemplate, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v3.CatalogTemplate{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *catalogTemplateGeneratingHandler) Handle(obj *v3.CatalogTemplate, status v3.TemplateStatus) (v3.TemplateStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.CatalogTemplateGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
