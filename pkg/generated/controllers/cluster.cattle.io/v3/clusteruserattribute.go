/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v3

import (
	"context"
	"time"

	v3 "github.com/rancher/rancher/pkg/apis/cluster.cattle.io/v3"
	"github.com/rancher/wrangler/pkg/generic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

type ClusterUserAttributeHandler func(string, *v3.ClusterUserAttribute) (*v3.ClusterUserAttribute, error)

type ClusterUserAttributeController interface {
	generic.ControllerMeta
	ClusterUserAttributeClient

	OnChange(ctx context.Context, name string, sync ClusterUserAttributeHandler)
	OnRemove(ctx context.Context, name string, sync ClusterUserAttributeHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() ClusterUserAttributeCache
}

type ClusterUserAttributeClient interface {
	Create(*v3.ClusterUserAttribute) (*v3.ClusterUserAttribute, error)
	Update(*v3.ClusterUserAttribute) (*v3.ClusterUserAttribute, error)

	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v3.ClusterUserAttribute, error)
	List(namespace string, opts metav1.ListOptions) (*v3.ClusterUserAttributeList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v3.ClusterUserAttribute, err error)
}

type ClusterUserAttributeCache interface {
	Get(namespace, name string) (*v3.ClusterUserAttribute, error)
	List(namespace string, selector labels.Selector) ([]*v3.ClusterUserAttribute, error)

	AddIndexer(indexName string, indexer ClusterUserAttributeIndexer)
	GetByIndex(indexName, key string) ([]*v3.ClusterUserAttribute, error)
}

type ClusterUserAttributeIndexer func(obj *v3.ClusterUserAttribute) ([]string, error)

type ClusterUserAttributeGenericController struct {
	generic.ControllerInterface[*v3.ClusterUserAttribute, *v3.ClusterUserAttributeList]
}

func (c *ClusterUserAttributeGenericController) OnChange(ctx context.Context, name string, sync ClusterUserAttributeHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v3.ClusterUserAttribute](sync))
}

func (c *ClusterUserAttributeGenericController) OnRemove(ctx context.Context, name string, sync ClusterUserAttributeHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v3.ClusterUserAttribute](sync))
}

func (c *ClusterUserAttributeGenericController) Cache() ClusterUserAttributeCache {
	return &ClusterUserAttributeGenericCache{
		c.ControllerInterface.Cache(),
	}
}

type ClusterUserAttributeGenericCache struct {
	generic.CacheInterface[*v3.ClusterUserAttribute]
}

func (c ClusterUserAttributeGenericCache) AddIndexer(indexName string, indexer ClusterUserAttributeIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v3.ClusterUserAttribute](indexer))
}
